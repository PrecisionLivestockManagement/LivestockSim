n_days, min_BirthDate, max_BirthDate, weather_data) {
# all animals
n_animals <- n_males_BelmontRed + n_females_BelmontRed + n_males_Brahman + n_females_Brahman +
n_males_Composite + n_females_Composite + n_males_Unknown + n_females_Unknown
# birth dates are distributed randomly
birth_dates <- sample(seq(as.Date(min_BirthDate), as.Date(max_BirthDate), by = "days"),
n_animals, replace = TRUE)
# creating data-frame with required predictor variables
data_animals <- data.frame(
ID = 1:n_animals,
breed = c(rep("Belmont Red", each = n_males_BelmontRed + n_females_BelmontRed),
rep("Brahman", each = n_males_Brahman + n_females_Brahman),
rep("composite", each = n_males_Composite + n_females_Composite),
rep("Unknown", each = n_males_Unknown + n_females_Unknown)),
sex = c(c(rep("male", each = n_males_BelmontRed), rep("female", each = n_females_BelmontRed)),
c(rep("male", each = n_males_Brahman), rep("female", each = n_females_Brahman)),
c(rep("male", each = n_males_Composite), rep("female", each = n_females_Composite)),
c(rep("male", each = n_males_Unknown), rep("female", each = n_females_Unknown))),
birthDate = birth_dates
)
# weather data processing
weather_data$Date <- as.Date(weather_data$Date)
weather_data$avg_temp <- round((weather_data$max_temp + weather_data$min_temp) / 2, 1)
weather_data <- weather_data %>%
group_by(month = format(Date, "%Y-%m")) %>%
mutate(monthly_rain = round(sum(daily_rain), 2))
weather_data <- weather_data %>%
group_by(month = format(Date, "%Y-%m")) %>%
mutate(monthly_temp = round(mean(avg_temp), 2))
weather_monthly <- weather_data[, -c(2:6)]
weather_data$weather_factor <- floor((weather_data$monthly_rain + weather_data$monthly_temp) / 50) + 1
# no. of days to simulate (simulation runs until the youngest animals reaches n_days)
simulation_dates <- seq(min(birth_dates), max(birth_dates) + n_days, by = "days")
data_new <- expand.grid(ID = unique(data_animals$ID), Date = simulation_dates)
data_merged <- merge(merge(data_new, data_animals, by = "ID", all.x = TRUE), weather_data, by = "Date")
data_merged$age <- as.numeric(data_merged$Date - data_merged$birthDate + 1)
data_sim <- subset(data_merged, age > 0)
#####
Belmont_dailywts <- read.csv("https://raw.githubusercontent.com/PrecisionLivestockManagement/LivestockSim/main/Data/Belmont_dailywts.csv")
Belmont_dailywts$stationname <- "Belmont"
Belmont_staticwts <- read.csv("https://raw.githubusercontent.com/PrecisionLivestockManagement/LivestockSim/refs/heads/main/Data/Belmont_staticwts.csv")
Belmont_animals <- read.csv("https://raw.githubusercontent.com/PrecisionLivestockManagement/LivestockSim/refs/heads/main/Data/Belmont_animals.csv")
Tremere_dailywts <- read.csv("https://raw.githubusercontent.com/PrecisionLivestockManagement/LivestockSim/refs/heads/main/Data/Tremere_dailywts.csv")
Tremere_dailywts$stationname <- "Tremere"
Tremere_staticwts <- read.csv("https://raw.githubusercontent.com/PrecisionLivestockManagement/LivestockSim/refs/heads/main/Data/Tremere_staticwts.csv")
Tremere_animals <- read.csv("https://raw.githubusercontent.com/PrecisionLivestockManagement/LivestockSim/refs/heads/main/Data/Tremere_animals.csv")
# combine Belmont and Tremere data in a same dataframe
dailywts_all <- rbind(Belmont_dailywts, Tremere_dailywts)
staticwts_all <- rbind(Belmont_staticwts, Tremere_staticwts)
animals_all <- rbind(Belmont_animals, Tremere_animals)
# pre-processing of dailywt data
dailywts_all <- dailywts_all[, -c(1, 5, 6)]
dailywts_all$Date <- as.Date(dailywts_all$Date)
colnames(dailywts_all)[colnames(dailywts_all) == "Weight"] <- "dailywt"
# pre-processing staticwt data
staticwts_all <- staticwts_all[, -1]
staticwts_all$Date <- as.Date(staticwts_all$Date)
colnames(staticwts_all)[colnames(staticwts_all) == "Weight"] <- "staticwt"
staticwts_all <- staticwts_all[staticwts_all$Date != "0014-06-19", ]
# pre-processing of animal data
animals_all <- animals_all[, -c(1, 2, 7)]
animals_all <- subset(animals_all, birthDate >= "2010-09-01" & birthDate != "2023-01-01" & sex != "xxxxxx")
animals_all <- animals_all %>%
mutate(birthWeight = ifelse(birthWeight == 0 | is.na(birthWeight), 38, birthWeight))
animals_all$birthWeight <- round(as.numeric(animals_all$birthWeight))
# selecting RFID's with all required variables available
common_RFID <- intersect(intersect(unique(dailywts_all$RFID), unique(staticwts_all$RFID)), unique(animals_all$RFID))
animals_selected <- animals_all %>%
filter(RFID %in% common_RFID) %>%
distinct()
dailywts_selected <- dailywts_all %>%
filter(RFID %in% common_RFID)
staticwts_selected <- staticwts_all %>%
filter(RFID %in% common_RFID)
# adding birthWeigt to the static weights record
animals_birth_info <- animals_selected
colnames(animals_birth_info)[colnames(animals_birth_info) == "birthDate"] <- "Date"
staticwts_selected <- merge(staticwts_selected, animals_birth_info, by = c("RFID", "stationname", "Date"), all.x = TRUE, all.y =  TRUE)
staticwts_selected$staticwt <- ifelse(!is.na(staticwts_selected$birthWeight), staticwts_selected$birthWeight, staticwts_selected$staticwt)
staticwts_selected <- staticwts_selected[, -c(5:7)]
# outlier removal of static weights
staticwts_out <- subset(staticwts_selected, staticwt >= 19)
# averaging staticwts if more than one record in a day
staticwts_data <- staticwts_out %>%
group_by(RFID, Date, stationname) %>%
summarise(staticwt = round(mean(staticwt), 2)) %>%
ungroup()
# #selecting animals with at least 2 static weight records
# staticwts_data <- staticwts_data %>%
#   group_by(RFID) %>%
#   filter(n_distinct(staticwt) >=2)
# ggplot(staticwts_data, aes(x = Date, y = staticwt, color = RFID)) +
#   geom_point() + guides(color = "none")
# using static wts as refrence weights
staticwts_ref <- merge(staticwts_data, animals_selected, by = c("RFID", "stationname"))
staticwts_ref$age <- as.numeric(as.Date(staticwts_ref$Date) - as.Date(staticwts_ref$birthDate) + 1)
staticwts_ref <- subset(staticwts_ref, age > 0)
staticwts_ref <- staticwts_ref %>%
group_by(RFID) %>%
complete(age = 1:max(age))
staticwts_ref <- staticwts_ref %>%
group_by(RFID) %>%
fill(sex, breed, birthDate, birthWeight, stationname, .direction = "downup") %>%
ungroup()
staticwts_ref$Date <- as.Date(staticwts_ref$birthDate) + staticwts_ref$age - 1
staticwts_ref <- staticwts_ref %>%
mutate(staticwt = if_else(age == 1, birthWeight, staticwt))
# linear interpolation of ref weights
staticwts_ref <- staticwts_ref %>%
group_by(RFID) %>%
arrange(age) %>%
mutate(refWeight = round(na.approx(staticwt, na.rm = TRUE), 2))
# outlier removal from dailywts
dailywts_selected_1 <- subset(dailywts_selected, dailywt >= 19)
dailywts_raw <- merge(dailywts_selected_1, staticwts_ref, by = c("RFID", "Date", "stationname"), all.x = TRUE, all.y = TRUE)
dailywts_30below <- subset(dailywts_raw, age <= 30)
dailywts_30below <- subset(dailywts_30below, dailywt < 150)
dailywts_30above <- subset(dailywts_raw, age >= 31)
dailywts_raw <- rbind(dailywts_30below, dailywts_30above)
# dailywts_raw <- dailywts_raw %>%
#   group_by(age) %>%
#   mutate(avg_refWeight = round(mean(refWeight), 2),
#          sd_refWeight = round(sd(refWeight), 2))
dailywts_raw$outlier <- ifelse(dailywts_raw$dailywt < (dailywts_raw$refWeight - 50) |
dailywts_raw$dailywt > (dailywts_raw$refWeight + 50), dailywts_raw$dailywt, NA)
dailywts_raw$dailywt <- ifelse(dailywts_raw$dailywt >= dailywts_raw$refWeight - 50 &
dailywts_raw$dailywt <= dailywts_raw$refWeight + 50, dailywts_raw$dailywt, NA)
dailywts_out <- subset(dailywts_raw, !is.na(dailywt))
# dailywts_out <- subset(dailywts_raw, dailywt >= avg_refWeight - (2 * sd_refWeight) &
#                          dailywt <= avg_refWeight + (2 * sd_refWeight))
# averaging dailywts if more than one record in a day
dailywts_data <- dailywts_out %>%
group_by(RFID, Date, stationname) %>%
summarise(dailywt = round(mean(dailywt), 2)) %>%
ungroup()
# weather data processing
Belmont_weather <- read.csv("https://raw.githubusercontent.com/PrecisionLivestockManagement/LivestockSim/refs/heads/main/Data/WeatherData_39083.csv")
Belmont_weather <- Belmont_weather[, c("YYYY.MM.DD", "daily_rain", "max_temp", "min_temp")]
colnames(Belmont_weather)[colnames(Belmont_weather) == "YYYY.MM.DD"] <- 'Date'
Belmont_weather$Date <- as.Date(Belmont_weather$Date)
Belmont_weather$avg_temp <- round((Belmont_weather$max_temp + Belmont_weather$min_temp) / 2, 1)
Belmont_weather <- Belmont_weather %>%
group_by(month = format(Date, "%Y-%m")) %>%
mutate(monthly_rain = round(sum(daily_rain), 2))
Belmont_weather <- Belmont_weather %>%
group_by(month = format(Date, "%Y-%m")) %>%
mutate(monthly_temp = round(mean(avg_temp), 2))
Belmont_weather_monthly <- Belmont_weather[, -c(2:6)]
Belmont_weather_monthly$stationname <- "Belmont"
# Tremere weather data processing (weather station is 50 km away)
Tremere_weather <- read.csv("https://raw.githubusercontent.com/PrecisionLivestockManagement/LivestockSim/refs/heads/main/Data/WeatherData_39089_TR.csv")
Tremere_weather <- Tremere_weather[, c("YYYY.MM.DD", "daily_rain", "max_temp", "min_temp")]
colnames(Tremere_weather)[colnames(Tremere_weather) == "YYYY.MM.DD"] <- 'Date'
Tremere_weather$Date <- as.Date(Tremere_weather$Date)
Tremere_weather$avg_temp <- round((Tremere_weather$max_temp + Tremere_weather$min_temp) / 2, 1)
Tremere_weather <- Tremere_weather %>%
group_by(month = format(Date, "%Y-%m")) %>%
mutate(monthly_rain = round(sum(daily_rain), 2))
Tremere_weather <- Tremere_weather %>%
group_by(month = format(Date, "%Y-%m")) %>%
mutate(monthly_temp = round(mean(avg_temp), 2))
Tremere_weather_monthly <- Tremere_weather[, -c(2:6)]
Tremere_weather_monthly$stationname <- "Tremere"
weather_data_monthly <- rbind(Belmont_weather_monthly, Tremere_weather_monthly)
weather_data_monthly$weather_factor <- floor((weather_data_monthly$monthly_rain + weather_data_monthly$monthly_temp) / 50) + 1
weather_data_monthly <- weather_data_monthly[, -c(2, 3)]
# complete_data
complete_data <- merge(merge(dailywts_data, animals_selected, by = c("RFID", "stationname")), weather_data_monthly, by = c("stationname", "Date"))
complete_data$age <- as.numeric(as.Date(complete_data$Date) - as.Date(complete_data$birthDate) + 1)
complete_data <- complete_data %>%
mutate(breed = recode(breed, "Composite " = "Composite",
"BR" = "Belmont Red",
"BrahxComp" = "Unknown",
"BJ" = "Unknown",
"TI" = "Unknown",
"SE" = "Unknown",
"xxxxxx" = "Unknown"))
# splitting complete_data for model training validation and testing
data_test_1 <- subset(complete_data, stationname == "Belmont" & (breed == "Belmont Red" | breed == "Composite") &
birthDate >= "2018-09-01" & birthDate <= "2019-02-28") #
data_test_2 <- subset(complete_data, stationname == "Belmont" & (breed == "Brahman" | breed == "Unknown") &
birthDate >= "2020-09-01" & birthDate <= "2021-02-28")#
data_model <- complete_data %>%
filter(!(RFID %in% data_test_1$RFID) & !(RFID %in% data_test_2$RFID))
model_RFID <- unique(data_model$RFID)
set.seed(0)
train_RFID <- sample(model_RFID, size = floor(0.8 * length(model_RFID)))
validation_RFID <- setdiff(model_RFID, train_RFID)
data_train <- data_model %>%
filter(RFID %in% train_RFID)
data_validation <- data_model %>%
filter(RFID %in% validation_RFID)
data_train %>%
group_by(breed, sex) %>%
summarise(count = n_distinct(RFID))
data_validation %>%
group_by(breed, sex) %>%
summarise(count = n_distinct(RFID))
data_test_1 %>%
group_by(breed, sex) %>%
summarise(count = n_distinct(RFID))
data_test_2 %>%
group_by(breed, sex) %>%
summarise(count = n_distinct(RFID))
# using the best hyperparameters obtained from random search above
# set.seed(10)
model_xgb <- xgboost(
data = data.matrix(data_train[, c("age", "sex", "breed", "weather_factor")]),
label = data_train$dailywt,
max_depth = 4,
learning_rate = 0.1,
nthread = 6,
nrounds = 100,
subsample = 0.8,
colsample_bytree = 1,
objective = "reg:squarederror",
verbose = 0
)
####################
# using the trained model for prediction
set.seed(3)
data_sim$Weight <- round(predict(model_xgb, newdata = data.matrix(data_sim[, c("age", "sex", "breed", "weather_factor")])), 2)
output_data <- data_sim[, -c(6:14)]
colnames(output_data) <- c("Date", "ID", "Breed", "Sex", "BirthDate", "Age", "Weight")
return(output_data)
}
# simulation run
weather_data_Belmont <- read.csv("https://raw.githubusercontent.com/PrecisionLivestockManagement/LivestockSim/refs/heads/main/Data/WeatherData_example.csv")
simulated_data <- sim_dailywt(n_females_BelmontRed = 10, n_males_BelmontRed = 10,
n_females_Brahman = 10, n_males_Brahman = 10,
n_females_Composite = 10, n_males_Composite = 10,
n_females_Unknown = 0, n_males_Unknown = 0,
n_days = 500, min_BirthDate = "2018-09-01", max_BirthDate = "2019-02-01",
weather_data = weather_data_Belmont)
# algorithm development #########
growth_traits <- function (WOW_data) {
WOW_data$Date <- as.Date(WOW_data$Date)
WOW_data$BirthDate <- as.Date(WOW_data$BirthDate)
WOW_data <- subset(WOW_data, WOWeight >= 20)
# averaging if more than one record in a day
WOW_data_1 <- WOW_data %>%
group_by(ID, Date) %>%
summarise(WOWeight = mean(WOWeight))
# #pick animals with at least 5 days of WOWeights
# WOW_data_1 <- WOW_data_1 %>%
#   group_by(ID) %>%
#   filter(n_distinct(WOWeight) >= 10)
custom_mean <- function(x) {
if (sum(!is.na(x)) >= 5) {
return(mean(x, na.rm = TRUE))
} else {
return(NA)
}
}
#Outlier removal
WOW_data_1 <- WOW_data_1 %>%
group_by(ID) %>%
complete(Date = seq(min(Date), max(Date), by = "day"))
WOW_data_1 <- WOW_data_1 %>%
group_by(ID) %>%
arrange(Date) %>%
mutate(RefWeight = round(rollapply(WOWeight, width = 15, align = 'center', FUN = custom_mean, fill = NA), 2)) %>%
ungroup()
WOW_data_out <- WOW_data_1 %>%
mutate(WOWeight = ifelse(WOWeight < RefWeight - 50 | WOWeight > RefWeight + 50, NA, WOWeight))
# smoothing using 15 day rolling average
data_smooth <- WOW_data_out %>%
group_by(ID) %>%
arrange(Date) %>%
mutate(WOWeight = round(rollapply(WOWeight, width = 15, align = 'center', FUN = custom_mean, fill = NA), 2)) %>%
ungroup()
data_smooth <- subset(data_smooth, !is.na(WOWeight))
#
birth_dates <- WOW_data[ , c("ID", "BirthDate")] %>%
distinct()
data_merged <- merge(data_smooth, birth_dates, by = "ID")
data_merged$Age <- as.numeric(data_merged$Date - data_merged$BirthDate + 1)
# 200 day weight calculation
day200_data <- subset(data_merged, Age >= 80 & Age <= 300)
day200_data$period <- as.numeric(cut(day200_data$Age, breaks = seq(80, 300, by = 15),
labels = 1:(length(seq(80, 300, by = 15)) - 1)))
day200_data_filtered <- day200_data %>%
group_by(ID, period) %>%
filter(length(WOWeight) >= 5)
day200_data_filtered_1 <- day200_data_filtered %>%
group_by(ID) %>%
mutate(target_period = period[which.min(abs(period - 200))]) %>%
filter(period == target_period)
day200_breedplan <- day200_data_filtered_1 %>%
group_by(ID) %>%
summarise(weight_200d = round(mean(WOWeight)), date_200d = mean(Date))
# 400 day weight calculation
day400_data <- subset(data_merged, Age >= 301 & Age <= 500)
day400_data$period <- as.numeric(cut(day400_data$Age, breaks = seq(301, 500, by = 15),
labels = 1:(length(seq(301, 500, by = 15)) - 1)))
day400_data_filtered <- day400_data %>%
group_by(ID, period) %>%
filter(length(WOWeight) >= 5)
day400_data_filtered_1 <- day400_data_filtered %>%
group_by(ID) %>%
mutate(target_period = period[which.min(abs(period - 400))]) %>%
filter(period == target_period)
day400_breedplan <- day400_data_filtered_1 %>%
group_by(ID) %>%
summarise(weight_400d = round(mean(WOWeight)), date_400d = mean(Date))
# 600 day weight calculation
day600_data <- subset(data_merged, Age >= 501 & Age <= 900)
day600_data$period <- as.numeric(cut(day600_data$Age, breaks = seq(501, 900, by = 15),
labels = 1:(length(seq(501, 900, by = 15)) - 1)))
day600_data_filtered <- day600_data %>%
group_by(ID, period) %>%
filter(length(WOWeight) >= 5)
day600_data_filtered_1 <- day600_data_filtered %>%
group_by(ID) %>%
mutate(target_period = period[which.min(abs(period - 600))]) %>%
filter(period == target_period)
day600_breedplan <- day600_data_filtered_1 %>%
group_by(ID) %>%
summarise(weight_600d = round(mean(WOWeight)), date_600d = mean(Date))
data_output <- merge(merge(day200_breedplan, day400_breedplan, by = "ID", all.x = TRUE, all.y = TRUE),
day600_breedplan, by = "ID", all.x = TRUE, all.y = TRUE)
return(data_output)
}
growthtraits_output <- growth_traits(simulated_data)
# algorithm development #########
growth_traits <- function (WOW_data) {
WOW_data$Date <- as.Date(WOW_data$Date)
WOW_data$BirthDate <- as.Date(WOW_data$BirthDate)
WOW_data <- subset(WOW_data, Weight >= 20)
# averaging if more than one record in a day
WOW_data_1 <- WOW_data %>%
group_by(ID, Date) %>%
summarise(Weight = mean(Weight))
# #pick animals with at least 5 days of Weights
# WOW_data_1 <- WOW_data_1 %>%
#   group_by(ID) %>%
#   filter(n_distinct(Weight) >= 10)
custom_mean <- function(x) {
if (sum(!is.na(x)) >= 5) {
return(mean(x, na.rm = TRUE))
} else {
return(NA)
}
}
#Outlier removal
WOW_data_1 <- WOW_data_1 %>%
group_by(ID) %>%
complete(Date = seq(min(Date), max(Date), by = "day"))
WOW_data_1 <- WOW_data_1 %>%
group_by(ID) %>%
arrange(Date) %>%
mutate(RefWeight = round(rollapply(Weight, width = 15, align = 'center', FUN = custom_mean, fill = NA), 2)) %>%
ungroup()
WOW_data_out <- WOW_data_1 %>%
mutate(Weight = ifelse(Weight < RefWeight - 50 | Weight > RefWeight + 50, NA, Weight))
# smoothing using 15 day rolling average
data_smooth <- WOW_data_out %>%
group_by(ID) %>%
arrange(Date) %>%
mutate(Weight = round(rollapply(Weight, width = 15, align = 'center', FUN = custom_mean, fill = NA), 2)) %>%
ungroup()
data_smooth <- subset(data_smooth, !is.na(Weight))
#
birth_dates <- WOW_data[ , c("ID", "BirthDate")] %>%
distinct()
data_merged <- merge(data_smooth, birth_dates, by = "ID")
data_merged$Age <- as.numeric(data_merged$Date - data_merged$BirthDate + 1)
# 200 day weight calculation
day200_data <- subset(data_merged, Age >= 80 & Age <= 300)
day200_data$period <- as.numeric(cut(day200_data$Age, breaks = seq(80, 300, by = 15),
labels = 1:(length(seq(80, 300, by = 15)) - 1)))
day200_data_filtered <- day200_data %>%
group_by(ID, period) %>%
filter(length(Weight) >= 5)
day200_data_filtered_1 <- day200_data_filtered %>%
group_by(ID) %>%
mutate(target_period = period[which.min(abs(period - 200))]) %>%
filter(period == target_period)
day200_breedplan <- day200_data_filtered_1 %>%
group_by(ID) %>%
summarise(weight_200d = round(mean(Weight)), date_200d = mean(Date))
# 400 day weight calculation
day400_data <- subset(data_merged, Age >= 301 & Age <= 500)
day400_data$period <- as.numeric(cut(day400_data$Age, breaks = seq(301, 500, by = 15),
labels = 1:(length(seq(301, 500, by = 15)) - 1)))
day400_data_filtered <- day400_data %>%
group_by(ID, period) %>%
filter(length(Weight) >= 5)
day400_data_filtered_1 <- day400_data_filtered %>%
group_by(ID) %>%
mutate(target_period = period[which.min(abs(period - 400))]) %>%
filter(period == target_period)
day400_breedplan <- day400_data_filtered_1 %>%
group_by(ID) %>%
summarise(weight_400d = round(mean(Weight)), date_400d = mean(Date))
# 600 day weight calculation
day600_data <- subset(data_merged, Age >= 501 & Age <= 900)
day600_data$period <- as.numeric(cut(day600_data$Age, breaks = seq(501, 900, by = 15),
labels = 1:(length(seq(501, 900, by = 15)) - 1)))
day600_data_filtered <- day600_data %>%
group_by(ID, period) %>%
filter(length(Weight) >= 5)
day600_data_filtered_1 <- day600_data_filtered %>%
group_by(ID) %>%
mutate(target_period = period[which.min(abs(period - 600))]) %>%
filter(period == target_period)
day600_breedplan <- day600_data_filtered_1 %>%
group_by(ID) %>%
summarise(weight_600d = round(mean(Weight)), date_600d = mean(Date))
data_output <- merge(merge(day200_breedplan, day400_breedplan, by = "ID", all.x = TRUE, all.y = TRUE),
day600_breedplan, by = "ID", all.x = TRUE, all.y = TRUE)
return(data_output)
}
growthtraits_output <- growth_traits(simulated_data)
View(growthtraits_output)
# algorithm development #########
growth_traits <- function (WOW_data) {
WOW_data$Date <- as.Date(WOW_data$Date)
WOW_data$BirthDate <- as.Date(WOW_data$BirthDate)
WOW_data <- subset(WOW_data, Weight >= 20)
# averaging if more than one record in a day
WOW_data_1 <- WOW_data %>%
group_by(ID, Date) %>%
summarise(Weight = mean(Weight))
# #pick animals with at least 5 days of Weights
# WOW_data_1 <- WOW_data_1 %>%
#   group_by(ID) %>%
#   filter(n_distinct(Weight) >= 10)
custom_mean <- function(x) {
if (sum(!is.na(x)) >= 5) {
return(mean(x, na.rm = TRUE))
} else {
return(NA)
}
}
#Outlier removal
WOW_data_1 <- WOW_data_1 %>%
group_by(ID) %>%
complete(Date = seq(min(Date), max(Date), by = "day"))
WOW_data_1 <- WOW_data_1 %>%
group_by(ID) %>%
arrange(Date) %>%
mutate(RefWeight = round(rollapply(Weight, width = 15, align = 'center', FUN = custom_mean, fill = NA), 2)) %>%
ungroup()
WOW_data_out <- WOW_data_1 %>%
mutate(Weight = ifelse(Weight < RefWeight - 50 | Weight > RefWeight + 50, NA, Weight))
# smoothing using 15 day rolling average
data_smooth <- WOW_data_out %>%
group_by(ID) %>%
arrange(Date) %>%
mutate(Weight = round(rollapply(Weight, width = 15, align = 'center', FUN = custom_mean, fill = NA), 2)) %>%
ungroup()
data_smooth <- subset(data_smooth, !is.na(Weight))
#
birth_dates <- WOW_data[ , c("ID", "BirthDate")] %>%
distinct()
data_merged <- merge(data_smooth, birth_dates, by = "ID")
data_merged$Age <- as.numeric(data_merged$Date - data_merged$BirthDate + 1)
# 200 day weight calculation
day200_data <- subset(data_merged, Age >= 80 & Age <= 300)
day200_data$period <- as.numeric(cut(day200_data$Age, breaks = seq(80, 300, by = 15),
labels = 1:(length(seq(80, 300, by = 15)) - 1)))
day200_data_filtered <- day200_data %>%
group_by(ID, period) %>%
filter(length(Weight) >= 5)
day200_data_filtered_1 <- day200_data_filtered %>%
group_by(ID) %>%
mutate(target_period = period[which.min(abs(period - 200))]) %>%
filter(period == target_period)
day200_breedplan <- day200_data_filtered_1 %>%
group_by(ID) %>%
summarise(Weight_200d = round(mean(Weight)), Date_200d = mean(Date))
# 400 day weight calculation
day400_data <- subset(data_merged, Age >= 301 & Age <= 500)
day400_data$period <- as.numeric(cut(day400_data$Age, breaks = seq(301, 500, by = 15),
labels = 1:(length(seq(301, 500, by = 15)) - 1)))
day400_data_filtered <- day400_data %>%
group_by(ID, period) %>%
filter(length(Weight) >= 5)
day400_data_filtered_1 <- day400_data_filtered %>%
group_by(ID) %>%
mutate(target_period = period[which.min(abs(period - 400))]) %>%
filter(period == target_period)
day400_breedplan <- day400_data_filtered_1 %>%
group_by(ID) %>%
summarise(Weight_400d = round(mean(Weight)), Date_400d = mean(Date))
# 600 day weight calculation
day600_data <- subset(data_merged, Age >= 501 & Age <= 900)
day600_data$period <- as.numeric(cut(day600_data$Age, breaks = seq(501, 900, by = 15),
labels = 1:(length(seq(501, 900, by = 15)) - 1)))
day600_data_filtered <- day600_data %>%
group_by(ID, period) %>%
filter(length(Weight) >= 5)
day600_data_filtered_1 <- day600_data_filtered %>%
group_by(ID) %>%
mutate(target_period = period[which.min(abs(period - 600))]) %>%
filter(period == target_period)
day600_breedplan <- day600_data_filtered_1 %>%
group_by(ID) %>%
summarise(Weight_600d = round(mean(Weight)), Date_600d = mean(Date))
data_output <- merge(merge(day200_breedplan, day400_breedplan, by = "ID", all.x = TRUE, all.y = TRUE),
day600_breedplan, by = "ID", all.x = TRUE, all.y = TRUE)
return(data_output)
}
growthtraits_output <- growth_traits(simulated_data)
devtools::load_all(".")
devtools::load_all(".")
library(LivestockSim)
remove.packages("LivestockSim")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
