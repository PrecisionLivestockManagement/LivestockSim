#####
library(DMMongoDB)
library(tidyverse)
library(lubridate)
library(gridExtra)
library(zoo)
library(DescTools)
library(xgboost)

Belmont_dailywts <- read.csv(file = "Belmont_dailywts.csv")
Belmont_dailywts$stationname <- "Belmont"
Belmont_staticwts <- read.csv(file = "Belmont_staticwts.csv")
Belmont_animals <- read.csv(file = "Belmont_animals.csv")

Tremere_dailywts <- read.csv(file = "Tremere_dailywts.csv")
Tremere_dailywts$stationname <- "Tremere"
Tremere_staticwts <- read.csv(file = "Tremere_staticwts.csv")
Tremere_animals <- read.csv(file = "Tremere_animals.csv")

# combine Belmont and Tremere data in a same dataframe
dailywts_all <- rbind(Belmont_dailywts, Tremere_dailywts)
staticwts_all <- rbind(Belmont_staticwts, Tremere_staticwts)
animals_all <- rbind(Belmont_animals, Tremere_animals)

# pre-processing of dailywt data
dailywts_all <- dailywts_all[, -c(1, 5, 6)]
dailywts_all$Date <- as.Date(dailywts_all$Date)
colnames(dailywts_all)[colnames(dailywts_all) == "Weight"] <- "dailywt"


# pre-processing staticwt data
staticwts_all <- staticwts_all[, -1]
staticwts_all$Date <- as.Date(staticwts_all$Date)
colnames(staticwts_all)[colnames(staticwts_all) == "Weight"] <- "staticwt"
staticwts_all <- staticwts_all[staticwts_all$Date != "0014-06-19", ]

# pre-processing of animal data
animals_all <- animals_all[, -c(1, 2, 7)]
animals_all <- subset(animals_all, birthDate >= "2010-09-01" & birthDate != "2023-01-01" & sex != "xxxxxx")
animals_all <- animals_all %>%
  mutate(birthWeight = ifelse(birthWeight == 0 | is.na(birthWeight), 38, birthWeight))
animals_all$birthWeight <- round(as.numeric(animals_all$birthWeight))


# selecting RFID's with all required variables available
common_RFID <- intersect(intersect(unique(dailywts_all$RFID), unique(staticwts_all$RFID)), unique(animals_all$RFID))

animals_selected <- animals_all %>%
  filter(RFID %in% common_RFID) %>%
  distinct()

dailywts_selected <- dailywts_all %>%
  filter(RFID %in% common_RFID)

staticwts_selected <- staticwts_all %>%
  filter(RFID %in% common_RFID)


# adding birthWeigt to the static weights record
animals_birth_info <- animals_selected
colnames(animals_birth_info)[colnames(animals_birth_info) == "birthDate"] <- "Date"
  
staticwts_selected <- merge(staticwts_selected, animals_birth_info, by = c("RFID", "stationname", "Date"), all.x = TRUE, all.y =  TRUE)
staticwts_selected$staticwt <- ifelse(!is.na(staticwts_selected$birthWeight), staticwts_selected$birthWeight, staticwts_selected$staticwt)
staticwts_selected <- staticwts_selected[, -c(5:7)]

# outlier removal of static weights
staticwts_out <- subset(staticwts_selected, staticwt >= 19)

# staticwts_raw <- staticwts_raw %>%
#   group_by(RFID) %>%
#   mutate(mean_wt = round(mean(staticwt), 2), sd_wt = round(sd(staticwt), 2))
# 
# 
# staticwts_out <- data.frame()
# 
# for (i in unique(staticwts_raw$RFID)) {
#   animal_data <- subset(staticwts_raw, RFID == i)
#   
#   lower_limit <- animal_data$mean_wt - 1.5 * animal_data$sd_wt
#   upper_limit <- animal_data$mean_wt + 1.5 * animal_data$sd_wt
#   
#   filtered_animal_data <- subset(animal_data, staticwt >= lower_limit & staticwt <= upper_limit)
#   staticwts_out <- rbind(staticwts_out, filtered_animal_data)
# }


# averaging staticwts if more than one record in a day
staticwts_data <- staticwts_out %>%
  group_by(RFID, Date, stationname) %>%
  summarise(staticwt = round(mean(staticwt), 2)) %>%
  ungroup()

# #selecting animals with at least 2 static weight records
# staticwts_data <- staticwts_data %>%
#   group_by(RFID) %>%
#   filter(n_distinct(staticwt) >=2)


# ggplot(staticwts_data, aes(x = Date, y = staticwt, color = RFID)) +
#   geom_point() + guides(color = "none")

# using static wts as refrence weights
staticwts_ref <- merge(staticwts_data, animals_selected, by = c("RFID", "stationname"))
staticwts_ref$age <- as.numeric(as.Date(staticwts_ref$Date) - as.Date(staticwts_ref$birthDate) + 1)
staticwts_ref <- subset(staticwts_ref, age > 0)

staticwts_ref <- staticwts_ref %>%
  group_by(RFID) %>%
  complete(age = 1:max(age))


staticwts_ref <- staticwts_ref %>%
  group_by(RFID) %>%
  fill(sex, breed, birthDate, birthWeight, stationname, .direction = "downup") %>%
  ungroup()

staticwts_ref$Date <- as.Date(staticwts_ref$birthDate) + staticwts_ref$age - 1

staticwts_ref <- staticwts_ref %>%
  mutate(staticwt = if_else(age == 1, birthWeight, staticwt))

# linear interpolation of ref weights
staticwts_ref <- staticwts_ref %>%
  group_by(RFID) %>%
  arrange(age) %>%
  mutate(refWeight = round(na.approx(staticwt, na.rm = TRUE), 2))


# outlier removal from dailywts
dailywts_selected_1 <- subset(dailywts_selected, dailywt >= 19)

dailywts_raw <- merge(dailywts_selected_1, staticwts_ref, by = c("RFID", "Date", "stationname"), all.x = TRUE, all.y = TRUE)


dailywts_30below <- subset(dailywts_raw, age <= 30)
dailywts_30below <- subset(dailywts_30below, dailywt < 150)

dailywts_30above <- subset(dailywts_raw, age >= 31)

dailywts_raw <- rbind(dailywts_30below, dailywts_30above)



# dailywts_raw <- dailywts_raw %>%
#   group_by(age) %>%
#   mutate(avg_refWeight = round(mean(refWeight), 2),
#          sd_refWeight = round(sd(refWeight), 2))

dailywts_raw$outlier <- ifelse(dailywts_raw$dailywt < (dailywts_raw$refWeight - 50) |
                                 dailywts_raw$dailywt > (dailywts_raw$refWeight + 50), dailywts_raw$dailywt, NA)

dailywts_raw$dailywt <- ifelse(dailywts_raw$dailywt >= dailywts_raw$refWeight - 50 &
                                 dailywts_raw$dailywt <= dailywts_raw$refWeight + 50, dailywts_raw$dailywt, NA)

dailywts_out <- subset(dailywts_raw, !is.na(dailywt))

# dailywts_out <- subset(dailywts_raw, dailywt >= avg_refWeight - (2 * sd_refWeight) &
#                          dailywt <= avg_refWeight + (2 * sd_refWeight))

# averaging dailywts if more than one record in a day
dailywts_data <- dailywts_out %>%
  group_by(RFID, Date, stationname) %>%
  summarise(dailywt = round(mean(dailywt), 2)) %>%
  ungroup()

# weather data processing
Belmont_weather <- read.csv(file = "WeatherData_39083.csv")
Belmont_weather <- Belmont_weather[, c("YYYY.MM.DD", "daily_rain", "max_temp", "min_temp")]
colnames(Belmont_weather)[colnames(Belmont_weather) == "YYYY.MM.DD"] <- 'Date'
Belmont_weather$Date <- as.Date(Belmont_weather$Date)

Belmont_weather$avg_temp <- round((Belmont_weather$max_temp + Belmont_weather$min_temp) / 2, 1)

Belmont_weather <- Belmont_weather %>%
  group_by(month = format(Date, "%Y-%m")) %>%
  mutate(monthly_rain = round(sum(daily_rain), 2))

Belmont_weather <- Belmont_weather %>%
  group_by(month = format(Date, "%Y-%m")) %>%
  mutate(monthly_temp = round(mean(avg_temp), 2))

Belmont_weather_monthly <- Belmont_weather[, -c(2:6)]
Belmont_weather_monthly$stationname <- "Belmont"


# Tremere weather data processing (weather station is 50 km away)
Tremere_weather <- read.csv(file = "WeatherData_39089_TR.csv")
Tremere_weather <- Tremere_weather[, c("YYYY.MM.DD", "daily_rain", "max_temp", "min_temp")]
colnames(Tremere_weather)[colnames(Tremere_weather) == "YYYY.MM.DD"] <- 'Date'
Tremere_weather$Date <- as.Date(Tremere_weather$Date)

Tremere_weather$avg_temp <- round((Tremere_weather$max_temp + Tremere_weather$min_temp) / 2, 1)

Tremere_weather <- Tremere_weather %>%
  group_by(month = format(Date, "%Y-%m")) %>%
  mutate(monthly_rain = round(sum(daily_rain), 2))

Tremere_weather <- Tremere_weather %>%
  group_by(month = format(Date, "%Y-%m")) %>%
  mutate(monthly_temp = round(mean(avg_temp), 2))

Tremere_weather_monthly <- Tremere_weather[, -c(2:6)]
Tremere_weather_monthly$stationname <- "Tremere"

weather_data_monthly <- rbind(Belmont_weather_monthly, Tremere_weather_monthly)
weather_data_monthly$weather_factor <- floor((weather_data_monthly$monthly_rain + weather_data_monthly$monthly_temp) / 50) + 1
weather_data_monthly <- weather_data_monthly[, -c(2, 3)]


# complete_data
complete_data <- merge(merge(dailywts_data, animals_selected, by = c("RFID", "stationname")), weather_data_monthly, by = c("stationname", "Date"))

complete_data$age <- as.numeric(as.Date(complete_data$Date) - as.Date(complete_data$birthDate) + 1)

complete_data <- complete_data %>%
  mutate(breed = recode(breed, "Composite " = "Composite",
                        "BR" = "Belmont Red",
                        "BrahxComp" = "Unknown",
                        "BJ" = "Unknown",
                        "TI" = "Unknown",
                        "SE" = "Unknown",
                        "xxxxxx" = "Unknown"))



# splitting complete_data for model training validation and testing

data_test_1 <- subset(complete_data, stationname == "Belmont" & (breed == "Belmont Red" | breed == "Composite") &
                        birthDate >= "2018-09-01" & birthDate <= "2019-02-28") #
data_test_2 <- subset(complete_data, stationname == "Belmont" & (breed == "Brahman" | breed == "Unknown") &
                        birthDate >= "2020-09-01" & birthDate <= "2021-02-28")#

data_model <- complete_data %>%
  filter(!(RFID %in% data_test_1$RFID) & !(RFID %in% data_test_2$RFID))

model_RFID <- unique(data_model$RFID)

set.seed(0)
train_RFID <- sample(model_RFID, size = floor(0.8 * length(model_RFID)))
validation_RFID <- setdiff(model_RFID, train_RFID)

data_train <- data_model %>%
  filter(RFID %in% train_RFID)

data_validation <- data_model %>%
  filter(RFID %in% validation_RFID)


data_train %>%
  group_by(breed, sex) %>%
  summarise(count = n_distinct(RFID))

data_validation %>%
  group_by(breed, sex) %>%
  summarise(count = n_distinct(RFID))

data_test_1 %>%
  group_by(breed, sex) %>%
  summarise(count = n_distinct(RFID))

data_test_2 %>%
  group_by(breed, sex) %>%
  summarise(count = n_distinct(RFID))



# # hyper-parameter tuning - random search method
# param_space <- expand.grid(
#   max_depth = c(1:9),
#   learning_rate = seq(0.1, 1, 0.1),
#   nthread = c(1:9),
#   nrounds = seq(50, 500, 50),
#   subsample = seq(0.1, 1, 0.1),
#   colsample_bytree = seq(0.1, 1, 0.1)
# )
# 
# best_hyperparameters <- NULL
# best_metric <- Inf
# 
# for (i in sample(nrow(param_space), 1000)) {
#   hyperparams <- param_space[i, ]
#   xgb_model <- xgboost(
#     data = data.matrix(data_train[, c("age", "sex", "breed", "weather_factor")]),
#     label = data_train$dailywt,
#     max_depth = hyperparams$max_depth,
#     learning_rate = hyperparams$learning_rate,
#     nthread = hyperparams$nthread,
#     nrounds = hyperparams$nrounds,
#     subsample = hyperparams$subsample,
#     colsample_bytree = hyperparams$colsample_bytree,
#     objective = "reg:squarederror",
#     verbose = 0
#   )
#   y_pred <- predict(xgb_model, newdata = data.matrix(data_validation[, c("age", "sex", "breed", "weather_factor")]))
#   rmse <- sqrt(mean((y_pred - data_validation$dailywt)^2, na.rm = TRUE))
# 
#   if (rmse < best_metric) {
#     best_metric <- rmse
#     best_hyperparameters <- hyperparams
#   }
# }
# 
# 
# model_xgb <- xgboost(
#   data = data.matrix(data_train[, c("age", "sex", "breed", "weather_factor")]),
#   label = data_train$dailywt,
#   max_depth = best_hyperparameters$max_depth,
#   learning_rate = best_hyperparameters$learning_rate,
#   nthread = best_hyperparameters$nthread,
#   nrounds = best_hyperparameters$nrounds,
#   subsample = best_hyperparameters$subsample,
#   colsample_bytree = best_hyperparameters$colsample_bytree,
#   objective = "reg:squarederror",
#   verbose = 0
# )

# using the best hyperparameters obtained from random search above
# set.seed(10)
model_xgb <- xgboost(
  data = data.matrix(data_train[, c("age", "sex", "breed", "weather_factor")]),
  label = data_train$dailywt,
  max_depth = 4,
  learning_rate = 0.1,
  nthread = 6,
  nrounds = 100,
  subsample = 0.8,
  colsample_bytree = 1,
  objective = "reg:squarederror",
  verbose = 0
)


##############################################

## simulation model development

sim_model <- function(n_males_BelmontRed, n_females_BelmontRed,
                      n_males_Brahman, n_females_Brahman,
                      n_males_Composite, n_females_Composite,
                      n_males_Unknown, n_females_Unknown,
                      n_days, min_birthDate, max_birthDate, weather_data) {
  
  # all animals
  n_animals <- n_males_BelmontRed + n_females_BelmontRed + n_males_Brahman + n_females_Brahman +
    n_males_Composite + n_females_Composite + n_males_Unknown + n_females_Unknown
  
  # birth dates are distributed randomly
  birth_dates <- sample(seq(as.Date(min_birthDate), as.Date(max_birthDate), by = "days"), 
                        n_animals, replace = TRUE)
  
  # creating data-frame with required predictor variables
  data_animals <- data.frame(
    ID = 1:n_animals,
    breed = c(rep("Belmont Red", each = n_males_BelmontRed + n_females_BelmontRed),
              rep("Brahman", each = n_males_Brahman + n_females_Brahman),
              rep("composite", each = n_males_Composite + n_females_Composite),
              rep("Unknown", each = n_males_Unknown + n_females_Unknown)),
    sex = c(c(rep("male", each = n_males_BelmontRed), rep("female", each = n_females_BelmontRed)),
            c(rep("male", each = n_males_Brahman), rep("female", each = n_females_Brahman)),
            c(rep("male", each = n_males_Composite), rep("female", each = n_females_Composite)),
            c(rep("male", each = n_males_Unknown), rep("female", each = n_females_Unknown))),
    birthDate = birth_dates
  )
  
  # weather data processing
  weather_data$Date <- as.Date(weather_data$Date)
  weather_data$avg_temp <- round((weather_data$max_temp + weather_data$min_temp) / 2, 1)
  
  weather_data <- weather_data %>%
    group_by(month = format(Date, "%Y-%m")) %>%
    mutate(monthly_rain = round(sum(daily_rain), 2))
  
  weather_data <- weather_data %>%
    group_by(month = format(Date, "%Y-%m")) %>%
    mutate(monthly_temp = round(mean(avg_temp), 2))
  
  weather_monthly <- weather_data[, -c(2:6)]
  weather_data$weather_factor <- floor((weather_data$monthly_rain + weather_data$monthly_temp) / 50) + 1
  
  # no. of days to simulate (simulation runs until the youngest animals reaches n_days)
  simulation_dates <- seq(min(birth_dates), max(birth_dates) + n_days, by = "days")
  
  data_new <- expand.grid(ID = unique(data_animals$ID), Date = simulation_dates)
  
  data_merged <- merge(merge(data_new, data_animals, by = "ID", all.x = TRUE), weather_data, by = "Date")
  
  
  data_merged$age <- as.numeric(data_merged$Date - data_merged$birthDate + 1)
  
  data_sim <- subset(data_merged, age > 0)
  
  
  # using the trained model for prediction
  set.seed(3)
  data_sim$Weight <- predict(model_xgb, newdata = data.matrix(data_sim[, c("age", "sex", "breed", "weather_factor")]))
  
  
  return(data_sim)  
}

# simulation run 1

data_test_1 %>%
  group_by(breed, sex) %>%
  summarise(count = n_distinct(RFID))

min(data_test_1$birthDate)
max(data_test_1$birthDate)

n_females_BelmontRed_1 <- 9
n_males_BelmontRed_1 <- 10
n_females_Brahman_1  <- 0
n_males_Brahman_1 <- 0
n_females_Composite_1 <- 12
n_males_Composite_1 <- 52
n_females_Unknown_1 <- 0
n_males_Unknown_1 <- 0
n_days_1 <- 500
min_birthDate_1 <- "2018-09-11"
max_birthDate_1 <- "2019-01-01"
weather_data_1 <- Belmont_weather

# set.seed(3)
sim_result_1 <- sim_model(n_males_BelmontRed_1, n_females_BelmontRed_1,
                          n_males_Brahman_1, n_females_Brahman_1,
                          n_males_Composite_1, n_females_Composite_1,
                          n_males_Unknown_1, n_females_Unknown_1,
                          n_days_1, min_birthDate_1, max_birthDate_1, weather_data_1)

sim_average_1 <- sim_result_1 %>%
  group_by(age) %>%
  summarise(avg_sim_weight = mean(Weight),
            sd_sim_weight = sd(Weight))

ggplot(sim_average_1, aes(x = age, y = avg_sim_weight)) +
  geom_line()

test_average_1 <- data_test_1 %>%
  group_by(age) %>%
  summarise(avg_test_weight = mean(dailywt),
            sd_test_weight = sd(dailywt))


test_merged_1 <- merge(sim_average_1, test_average_1, by = "age", all.x = TRUE)
test_merged_1$diff <- test_merged_1$avg_sim_weight - test_merged_1$avg_test_weight

test_merged_1 <- subset(test_merged_1, !is.na(avg_test_weight))

#CCC_1
CCC(test_merged_1$avg_test_weight, test_merged_1$avg_sim_weight, ci = "z-transform", conf.level = 0.95, na.rm = TRUE)$rho.c

#RMSE_1
sqrt(mean((test_merged_1$avg_sim_weight - test_merged_1$avg_test_weight)^2, na.rm = TRUE))

#mape_1
mean(abs((test_merged_1$avg_test_weight - test_merged_1$avg_sim_weight) / test_merged_1$avg_test_weight), na.rm = TRUE) * 100

# rsq_1
summary(lm(avg_sim_weight ~ avg_test_weight, data = test_merged_1))

sim_plot_1 <- ggplot(test_merged_1, aes(x = avg_test_weight, y = avg_sim_weight)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  geom_smooth(method = "lm", se = FALSE, color = "blue", formula = y ~ x) +
  labs(x = "Observed weights (kg)", y = "Simulated weights (kg)") +
  scale_x_continuous(breaks = seq(0, 300, by = 50)) +
  scale_y_continuous(breaks = seq(0, 300, by = 50)) +
  ggtitle("(a)") + theme(plot.title = element_text(hjust = 0.5)) + theme_minimal()

sim_plot_1


# simulation run 2 ####
data_test_2 %>%
  group_by(breed, sex) %>%
  summarise(count = n_distinct(RFID))

min(data_test_2$birthDate)
max(data_test_2$birthDate)

n_females_BelmontRed_2 <- 0
n_males_BelmontRed_2 <- 0
n_females_Brahman_2 <- 35
n_males_Brahman_2 <- 2
n_females_Composite_2 <- 0
n_males_Composite_2 <- 0
n_females_Unknown_2 <- 12
n_males_Unknown_2 <- 84
n_days_2 <- 500
min_birthDate_2 <- "2020-09-08"
max_birthDate_2 <- "2021-02-04"
weather_data_2 <- Belmont_weather

# set.seed(4)
sim_result_2 <- sim_model(n_males_BelmontRed_2, n_females_BelmontRed_2,
                          n_males_Brahman_2, n_females_Brahman_2,
                          n_males_Composite_2, n_females_Composite_2,
                          n_males_Unknown_2, n_females_Unknown_2,
                          n_days_2, min_birthDate_2, max_birthDate_2, weather_data_2)

sim_average_2 <- sim_result_2 %>%
  group_by(age) %>%
  summarise(avg_sim_weight = mean(Weight),
            sd_sim_weight = sd(Weight))

ggplot(sim_average_2, aes(x = age, y = avg_sim_weight)) +
  geom_line()

test_average_2 <- data_test_2 %>%
  group_by(age) %>%
  summarise(avg_test_weight = mean(dailywt),
            sd_test_weight = sd(dailywt))

test_merged_2 <- merge(sim_average_2, test_average_2, by = "age", all.x = TRUE)
test_merged_2$diff <- test_merged_2$avg_sim_weight - test_merged_2$avg_test_weight

test_merged_2 <- subset(test_merged_2, !is.na(avg_test_weight))

#CCC_2
CCC(test_merged_2$avg_test_weight, test_merged_2$avg_sim_weight, ci = "z-transform", conf.level = 0.95, na.rm = TRUE)$rho.c

#RMSE_2
sqrt(mean((test_merged_2$avg_sim_weight - test_merged_2$avg_test_weight)^2, na.rm = TRUE))

#mape_1
mean(abs((test_merged_2$avg_test_weight - test_merged_2$avg_sim_weight) / test_merged_2$avg_test_weight), na.rm = TRUE) * 100

# rsq_2
summary(lm(avg_sim_weight ~ avg_test_weight, data = test_merged_2))


sim_plot_2 <- ggplot(test_merged_2, aes(x = avg_test_weight, y = avg_sim_weight)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  geom_smooth(method = "lm", se = FALSE, color = "blue", formula = y ~ x) +
  labs(x = "Observed weights (kg)", y = "Simulated weights (kg)") +
  scale_x_continuous(breaks = seq(0, 350, by = 50)) +
  scale_y_continuous(breaks = seq(0, 350, by = 50)) +
  ggtitle("(b)") + theme(plot.title = element_text(hjust = 0.5)) + theme_minimal()

sim_plot_2  

grid.arrange(sim_plot_1, sim_plot_2, nrow = 1)



#combine test set 1 and test set 2
sim_result <- rbind(sim_result_1, sim_result_2)
data_test <- rbind(data_test_1, data_test_2)

sim_average <- sim_result %>%
  group_by(age) %>%
  summarise(avg_sim_weight = mean(Weight))

test_average <- data_test %>%
  group_by(age) %>%
  summarise(avg_test_weight = mean(dailywt))


test_merged <- merge(sim_average, test_average, by = "age", all.x = TRUE)

test_merged$diff <- test_merged$avg_sim_weight - test_merged$avg_test_weight
test_merged$avg <- (test_merged$avg_sim_weight + test_merged$avg_test_weight) / 2

test_merged <- subset(test_merged, !is.na(test_merged$avg_test_weight))

hist_all <- ggplot(test_merged) +
  geom_histogram(aes(diff), binwidth = 5, color = "black", fill = "grey") +
  labs(x = "Difference between predicted and observed weights", y = "Count") +
  labs(x = "Simulated minus observed weights (kg)", y = "Frequency") +
  scale_x_continuous(breaks = seq(-100, 100, by = 20)) +
  scale_y_continuous(breaks = seq(0, 50, by = 10)) +
  theme(plot.title = element_text(hjust = 0.5)) + 
  ggtitle("(b)") + theme_minimal()

# ggplot(test_merged) +
#   geom_histogram(aes(avg), binwidth = 5, color = "black", fill = "grey") +
#   labs(x = "Difference between predicted and observed weights", y = "Count") +
#   labs(x = "Simulated weights - observed weights (kg)", y = "Frequency") +
#   scale_x_continuous(breaks = seq(0, 300, by = 50)) +
#   scale_y_continuous(breaks = seq(0, 50, by = 10)) +
#   theme(plot.title = element_text(hjust = 0.5)) + theme_minimal()

scatter_all <- ggplot(test_merged, aes(x = avg, y = diff)) +
  geom_point() +
  geom_hline(yintercept = mean(test_merged$diff)) +
  geom_hline(yintercept = mean(test_merged$diff) + 1.96 * sd(test_merged$diff), linetype = "dashed") +
  geom_hline(yintercept = mean(test_merged$diff) - 1.96 * sd(test_merged$diff), linetype = "dashed") +
  scale_x_continuous(breaks = seq(0, 300, by = 50)) +
  scale_y_continuous(breaks = seq(-100, 100, by = 20)) +
  labs(x = "Average of simulated and observed weights", y = "Simulated minus observed weights (kg)") +
  ggtitle("(a)") + theme_minimal()

grid.arrange(scatter_all, hist_all)


qqnorm(test_merged$diff)
qqline(test_merged$diff)

# Breed wise
# Belmnot Red
sim_BelmontRed <- subset(sim_result_1, breed == "Belmont Red")
test_BelmontRed <- subset(data_test_1, breed == "Belmont Red")

sim_avg_BelmontRed <- sim_BelmontRed %>%
  group_by(age) %>%
  summarise(avg_sim_weight = mean(Weight),
            sd_sim_weight = sd(Weight))

test_avg_BelmontRed <- test_BelmontRed %>%
  group_by(age) %>%
  summarise(avg_test_weight = mean(dailywt),
            sd_test_weight = sd(dailywt))

test_merged_BelmontRed <- merge(sim_avg_BelmontRed, test_avg_BelmontRed, by = "age", all.x = TRUE)

test_merged_BelmontRed$diff <- test_merged_BelmontRed$avg_sim_weight - test_merged_BelmontRed$avg_test_weight

hist_BelmontRed <- ggplot(test_merged_BelmontRed) +
  geom_histogram(aes(diff), binwidth = 5, color = "black", fill = "grey") +
  labs(x = "Simulated minus observed weights (kg)", y = "Frequency") +
  scale_x_continuous(breaks = seq(-100, 100, by = 10)) +
  scale_y_continuous(breaks = seq(0, 50, by = 5)) +
  ggtitle("(a)") + theme(plot.title = element_text(hjust = 0.5)) + theme_minimal()

hist_BelmontRed

# Brahman
sim_Brahman <- subset(sim_result_2, breed == "Brahman")
test_Brahman <- subset(data_test_2, breed == "Brahman")

sim_avg_Brahman <- sim_Brahman %>%
  group_by(age) %>%
  summarise(avg_sim_weight = mean(Weight),
            sd_sim_weight = sd(Weight))

test_avg_Brahman <- test_Brahman %>%
  group_by(age) %>%
  summarise(avg_test_weight = mean(dailywt),
            sd_test_weight = sd(dailywt))

test_merged_Brahman <- merge(sim_avg_Brahman, test_avg_Brahman, by = "age", all.x = TRUE)

test_merged_Brahman$diff <- test_merged_Brahman$avg_sim_weight - test_merged_Brahman$avg_test_weight

hist_Brahman <- ggplot(test_merged_Brahman) +
  geom_histogram(aes(diff), binwidth = 5, color = "black", fill = "grey") +
  labs(x = "Simulated minus observed weights (kg)", y = "Frequency") +
  scale_x_continuous(breaks = seq(-100, 120, by = 20)) +
  scale_y_continuous(breaks = seq(0, 100, by = 10)) +
  ggtitle("(b)") + theme(plot.title = element_text(hjust = 0.5)) + theme_minimal()


# Composite
sim_Composite <- subset(sim_result_1, breed == "composite")
test_Composite <- subset(data_test_1, breed == "Composite")

sim_avg_Composite <- sim_Composite %>%
  group_by(age) %>%
  summarise(avg_sim_weight = mean(Weight),
            sd_sim_weight = sd(Weight))


test_avg_Composite <- test_Composite %>%
  group_by(age) %>%
  summarise(avg_test_weight = mean(dailywt),
            sd_test_weight = sd(dailywt))

test_merged_Composite <- merge(sim_avg_Composite, test_avg_Composite, by = "age", all.x = TRUE)

test_merged_Composite$diff <- test_merged_Composite$avg_sim_weight - test_merged_Composite$avg_test_weight

hist_Composite <- ggplot(test_merged_Composite) +
  geom_histogram(aes(diff), binwidth = 5, color = "black", fill = "grey") +
  labs(x = "Simulated minus observed weights (kg)", y = "Frequency") +
  scale_x_continuous(breaks = seq(-100, 100, by = 20)) +
  scale_y_continuous(breaks = seq(0, 50, by = 10)) +
  ggtitle("(c)") + theme(plot.title = element_text(hjust = 0.5)) + theme_minimal()


# Unknown
sim_Unknown <- subset(sim_result_2, breed == "Unknown")
test_Unknown <- subset(data_test_2, breed == "Unknown")

sim_avg_Unknown <- sim_Unknown %>%
  group_by(age) %>%
  summarise(avg_sim_weight = mean(Weight),
            sd_sim_weight = sd(Weight))


test_avg_Unknown <- test_Unknown %>%
  group_by(age) %>%
  summarise(avg_test_weight = mean(dailywt),
            sd_test_weight = sd(dailywt))

test_merged_Unknown <- merge(sim_avg_Unknown, test_avg_Unknown, by = "age", all.x = TRUE)

test_merged_Unknown$diff <- test_merged_Unknown$avg_sim_weight - test_merged_Unknown$avg_test_weight

hist_Unknown <- ggplot(test_merged_Unknown) +
  geom_histogram(aes(diff), binwidth = 5, color = "black", fill = "grey") +
  labs(x = "Simulated minus observed weights (kg)", y = "Frequency") +
  scale_x_continuous(breaks = seq(-100, 100, by = 20)) +
  scale_y_continuous(breaks = seq(0, 50, by = 10)) +
  ggtitle("(d)") + theme(plot.title = element_text(hjust = 0.5)) + theme_minimal()


grid.arrange(hist_BelmontRed, hist_Brahman, hist_Composite, hist_Unknown, nrow = 2)


# Tabulation and graphs ####
#
length(subset(animals_selected, stationname == "Belmont")$RFID)
length(unique(complete_data$RFID))


# Belmont
stwt_Belmont <- subset(staticwts_data, stationname == "Belmont")
length(unique(stwt_Belmont$RFID))
length(!is.na(stwt_Belmont$staticwt))

summary_stwt_Belmont <- stwt_Belmont %>%
  group_by(RFID) %>%
  summarise(min = round(min(staticwt)),
            mean = round(mean(staticwt)),
            max = round(max(staticwt)),
            sd = round(sd(staticwt)),
            cv = round(sd(staticwt)/mean(staticwt)*100))

for (i in names(summary_stwt_Belmont[, 2:6])) {
  avg <- round(mean(summary_stwt_Belmont[[i]], na.rm = TRUE))
  sd <- round(sd(summary_stwt_Belmont[[i]], na.rm = TRUE))
  print(data.frame(stat = i, avg, sd))
}


wow_raw_Belmont <- subset(dailywts_selected, stationname == "Belmont")
length(unique(wow_raw_Belmont$RFID))
length(!is.na(wow_raw_Belmont$dailywt))

summary_wow_raw_Belmont <- wow_raw_Belmont %>%
  group_by(RFID) %>%
  summarise(min = round(min(dailywt)),
            mean = round(mean(dailywt)),
            max = round(max(dailywt)),
            sd = round(sd(dailywt)),
            cv = round(sd(dailywt)/mean(dailywt)*100))

for (i in names(summary_wow_raw_Belmont[, 2:6])) {
  avg <- round(mean(summary_wow_raw_Belmont[[i]], na.rm = TRUE))
  sd <- round(sd(summary_wow_raw_Belmont[[i]], na.rm = TRUE))
  print(data.frame(stat = i, avg, sd))
}


wow_clean_Belmont <- subset(dailywts_data, stationname == "Belmont")
length(unique(wow_clean_Belmont$RFID))
length(!is.na(wow_clean_Belmont$dailywt))

summary_wow_clean_Belmont <- wow_clean_Belmont %>%
  group_by(RFID) %>%
  summarise(min = round(min(dailywt)),
            mean = round(mean(dailywt)),
            max = round(max(dailywt)),
            sd = round(sd(dailywt)),
            cv = round(sd(dailywt)/mean(dailywt)*100))

for (i in names(summary_wow_clean_Belmont[, 2:6])) {
  avg <- round(mean(summary_wow_clean_Belmont[[i]], na.rm = TRUE))
  sd <- round(sd(summary_wow_clean_Belmont[[i]], na.rm = TRUE))
  print(data.frame(stat = i, avg, sd))
}

# Tremere
stwt_Tremere <- subset(staticwts_data, stationname == "Tremere")
length(unique(stwt_Tremere$RFID))
length(!is.na(stwt_Tremere$staticwt))

summary_stwt_Tremere <- stwt_Tremere %>%
  group_by(RFID) %>%
  summarise(min = round(min(staticwt)),
            mean = round(mean(staticwt)),
            max = round(max(staticwt)),
            sd = round(sd(staticwt)),
            cv = round(sd(staticwt)/mean(staticwt)*100))

for (i in names(summary_stwt_Tremere[, 2:6])) {
  avg <- round(mean(summary_stwt_Tremere[[i]], na.rm = TRUE))
  sd <- round(sd(summary_stwt_Tremere[[i]], na.rm = TRUE))
  print(data.frame(stat = i, avg, sd))
}


wow_raw_Tremere <- subset(dailywts_selected, stationname == "Tremere")
length(unique(wow_raw_Tremere$RFID))
length(!is.na(wow_raw_Tremere$dailywt))

summary_wow_raw_Tremere <- wow_raw_Tremere %>%
  group_by(RFID) %>%
  summarise(min = round(min(dailywt)),
            mean = round(mean(dailywt)),
            max = round(max(dailywt)),
            sd = round(sd(dailywt)),
            cv = round(sd(dailywt)/mean(dailywt)*100))

for (i in names(summary_wow_raw_Tremere[, 2:6])) {
  avg <- round(mean(summary_wow_raw_Tremere[[i]], na.rm = TRUE))
  sd <- round(sd(summary_wow_raw_Tremere[[i]], na.rm = TRUE))
  print(data.frame(stat = i, avg, sd))
}


wow_clean_Tremere <- subset(dailywts_data, stationname == "Tremere")
length(unique(wow_clean_Tremere$RFID))
length(!is.na(wow_clean_Tremere$dailywt))

summary_wow_clean_Tremere <- wow_clean_Tremere %>%
  group_by(RFID) %>%
  summarise(min = round(min(dailywt)),
            mean = round(mean(dailywt)),
            max = round(max(dailywt)),
            sd = round(sd(dailywt)),
            cv = round(sd(dailywt)/mean(dailywt)*100))

for (i in names(summary_wow_clean_Tremere[, 2:6])) {
  avg <- round(mean(summary_wow_clean_Tremere[[i]], na.rm = TRUE))
  sd <- round(sd(summary_wow_clean_Tremere[[i]], na.rm = TRUE))
  print(data.frame(stat = i, avg, sd))
}


#
length(unique(complete_data$RFID))

length(!is.na(staticwts_raw$staticwt))
length(!is.na(staticwts_data$staticwt))

length(!is.na(dailywts_raw$dailywt))
length(!is.na(dailywts_data$dailywt))

#
males_BelmontRed <- subset(complete_data, sex == "male" & breed == "Belmont Red")
length(unique(males_BelmontRed$RFID))
females_BelmontRed <- subset(complete_data, sex == "female" & breed == "Belmont Red")
length(unique(females_BelmontRed$RFID))

males_Brahman <- subset(complete_data, sex == "male" & breed == "Brahman")
length(unique(males_Brahman$RFID))
females_Brahman <- subset(complete_data, sex == "female" & breed == "Brahman")
length(unique(females_Brahman$RFID))

males_Composite <- subset(complete_data, sex == "male" & breed == "Composite")
length(unique(males_Composite$RFID))
females_Composite <- subset(complete_data, sex == "female" & breed == "Composite")
length(unique(females_Composite$RFID))

males_Unknown <- subset(complete_data, sex == "male" & breed == "Unknown")
length(unique(males_Unknown$RFID))
females_Unknown <- subset(complete_data, sex == "female" & breed == "Unknown")
length(unique(females_Unknown$RFID))


# training data
males_BelmontRed_train <- subset(data_train, sex == "male" & breed == "Belmont Red")
length(unique(males_BelmontRed_train$RFID))
length(!is.na(males_BelmontRed_train$dailywt))

females_BelmontRed_train <- subset(data_train, sex == "female" & breed == "Belmont Red")
length(unique(females_BelmontRed_train$RFID))
length(!is.na(females_BelmontRed_train$dailywt))


males_Brahman_train <- subset(data_train, sex == "male" & breed == "Brahman")
length(unique(males_Brahman_train$RFID))
length(!is.na(males_Brahman_train$dailywt))

females_Brahman_train <- subset(data_train, sex == "female" & breed == "Brahman")
length(unique(females_Brahman_train$RFID))
length(!is.na(females_Brahman_train$dailywt))


males_Composite_train <- subset(data_train, sex == "male" & breed == "Composite")
length(unique(males_Composite_train$RFID))
length(!is.na(males_Composite_train$dailywt))

females_Composite_train <- subset(data_train, sex == "female" & breed == "Composite")
length(unique(females_Composite_train$RFID))
length(!is.na(females_Composite_train$dailywt))


males_Unknown_train <- subset(data_train, sex == "male" & breed == "Unknown")
length(unique(males_Unknown_train$RFID))
length(!is.na(males_Unknown_train$dailywt))

females_Unknown_train <- subset(data_train, sex == "female" & breed == "Unknown")
length(unique(females_Unknown_train$RFID))
length(!is.na(females_Unknown_train$dailywt))

length(unique(data_train$RFID))
length(!is.na(data_train$dailywt))

# validation data
males_BelmontRed_validation <- subset(data_validation, sex == "male" & breed == "Belmont Red")
length(unique(males_BelmontRed_validation$RFID))
length(!is.na(males_BelmontRed_validation$dailywt))

females_BelmontRed_validation <- subset(data_validation, sex == "female" & breed == "Belmont Red")
length(unique(females_BelmontRed_validation$RFID))
length(!is.na(females_BelmontRed_validation$dailywt))


males_Brahman_validation <- subset(data_validation, sex == "male" & breed == "Brahman")
length(unique(males_Brahman_validation$RFID))
length(!is.na(males_Brahman_validation$dailywt))

females_Brahman_validation <- subset(data_validation, sex == "female" & breed == "Brahman")
length(unique(females_Brahman_validation$RFID))
length(!is.na(females_Brahman_validation$dailywt))


males_Composite_validation <- subset(data_validation, sex == "male" & breed == "Composite")
length(unique(males_Composite_validation$RFID))
length(!is.na(males_Composite_validation$dailywt))

females_Composite_validation <- subset(data_validation, sex == "female" & breed == "Composite")
length(unique(females_Composite_validation$RFID))
length(!is.na(females_Composite_validation$dailywt))


males_Unknown_validation <- subset(data_validation, sex == "male" & breed == "Unknown")
length(unique(males_Unknown_validation$RFID))
length(!is.na(males_Unknown_validation$dailywt))

females_Unknown_validation <- subset(data_validation, sex == "female" & breed == "Unknown")
length(unique(females_Unknown_validation$RFID))
length(!is.na(females_Unknown_validation$dailywt))

length(unique(data_validation$RFID))
length(!is.na(data_validation$dailywt))


# test set 1
males_BelmontRed_test1 <- subset(data_test_1, sex == "male" & breed == "Belmont Red")
length(unique(males_BelmontRed_test1$RFID))
length(!is.na(males_BelmontRed_test1$dailywt))

females_BelmontRed_test1 <- subset(data_test_1, sex == "female" & breed == "Belmont Red")
length(unique(females_BelmontRed_test1$RFID))
length(!is.na(females_BelmontRed_test1$dailywt))


males_Brahman_test1 <- subset(data_test_1, sex == "male" & breed == "Brahman")
length(unique(males_Brahman_test1$RFID))
length(!is.na(males_Brahman_test1$dailywt))

females_Brahman_test1 <- subset(data_test_1, sex == "female" & breed == "Brahman")
length(unique(females_Brahman_test1$RFID))
length(!is.na(females_Brahman_test1$dailywt))


males_Composite_test1 <- subset(data_test_1, sex == "male" & breed == "Composite")
length(unique(males_Composite_test1$RFID))
length(!is.na(males_Composite_test1$dailywt))

females_Composite_test1 <- subset(data_test_1, sex == "female" & breed == "Composite")
length(unique(females_Composite_test1$RFID))
length(!is.na(females_Composite_test1$dailywt))


males_Unknown_test1 <- subset(data_test_1, sex == "male" & breed == "Unknown")
length(unique(males_Unknown_test1$RFID))
length(!is.na(males_Unknown_test1$dailywt))

females_Unknown_test1 <- subset(data_test_1, sex == "female" & breed == "Unknown")
length(unique(females_Unknown_test1$RFID))
length(!is.na(females_Unknown_test1$dailywt))

length(unique(data_test_1$RFID))
length(!is.na(data_test_1$dailywt))


# test set 2
males_BelmontRed_test2 <- subset(data_test_2, sex == "male" & breed == "Belmont Red")
length(unique(males_BelmontRed_test2$RFID))
length(!is.na(males_BelmontRed_test2$dailywt))

females_BelmontRed_test2 <- subset(data_test_2, sex == "female" & breed == "Belmont Red")
length(unique(females_BelmontRed_test2$RFID))
length(!is.na(females_BelmontRed_test2$dailywt))


males_Brahman_test2 <- subset(data_test_2, sex == "male" & breed == "Brahman")
length(unique(males_Brahman_test2$RFID))
length(!is.na(males_Brahman_test2$dailywt))

females_Brahman_test2 <- subset(data_test_2, sex == "female" & breed == "Brahman")
length(unique(females_Brahman_test2$RFID))
length(!is.na(females_Brahman_test2$dailywt))


males_Composite_test2 <- subset(data_test_2, sex == "male" & breed == "Composite")
length(unique(males_Composite_test2$RFID))
length(!is.na(males_Composite_test2$dailywt))

females_Composite_test2 <- subset(data_test_2, sex == "female" & breed == "Composite")
length(unique(females_Composite_test2$RFID))
length(!is.na(females_Composite_test2$dailywt))


males_Unknown_test2 <- subset(data_test_2, sex == "male" & breed == "Unknown")
length(unique(males_Unknown_test2$RFID))
length(!is.na(males_Unknown_test2$dailywt))

females_Unknown_test2 <- subset(data_test_2, sex == "female" & breed == "Unknown")
length(unique(females_Unknown_test2$RFID))
length(!is.na(females_Unknown_test2$dailywt))

length(unique(data_test_2$RFID))
length(!is.na(data_test_2$dailywt))




#
# example_outlier_plot <- subset(dailywts_raw, RFID == "982 123736288171")
example_outlier_plot <- subset(dailywts_raw, RFID == "982 123707586285")
# example_outlier_plot <- subset(dailywts_raw, RFID == "982 123707586277")
# example_outlier_plot <- subset(dailywts_raw, RFID == "982 123707585409")

# graph to show outlier removal
ggplot(example_outlier_plot, aes(x = age)) +
  geom_point(aes(y = dailywt)) +
  geom_point(aes(y = outlier), color = "red") +
  geom_line(aes(y = refWeight - 100), color = "red") +
  geom_line(aes(y = refWeight + 100), color = 'red') +
  geom_line(aes(y = refWeight), color = 'blue') +
  geom_point(aes(y = staticwt), color = 'blue', size = 4, shape = 18) +
  labs(x = "age in days", y = "Weight in Kg") +
  theme_minimal()



ggplot(example_outlier_plot, aes(x = age)) +
  geom_point(aes(y = dailywt, color = "Valid WO weight", shape = "Valid WO weight", size = "Valid WO weight")) +  
  geom_point(aes(y = outlier, color = "Outlier WO weight", shape = "Outlier WO weight", size = "Outlier WO weight")) +       
  geom_line(aes(y = refWeight - 50), linetype = "dashed", size = 0.7) +
  geom_line(aes(y = refWeight + 50), linetype = "dashed", size = 0.7) +
  geom_line(aes(y = refWeight), size = 0.7) +
  geom_point(aes(y = staticwt, color = "Static Weight", shape = "Static Weight", size = "Static Weight")) +
  scale_color_manual(values = c("Valid WO weight" = "black", "Outlier WO weight" = "red", "Static Weight" = "blue"),
                     breaks = c("Outlier WO weight", "Valid WO weight", "Static Weight")) +
  scale_shape_manual(values = c("Valid WO weight" = 16, "Outlier WO weight" = 16, "Static Weight" = 18),
                     breaks = c("Outlier WO weight", "Valid WO weight", "Static Weight")) +
  scale_size_manual(values = c("Valid WO weight" = 1.5, "Outlier WO weight" = 1.5, "Static Weight" = 4),
                    breaks = c("Outlier WO weight", "Valid WO weight", "Static Weight")) +
  labs(x = "Age in days", y = "Weight in Kg", color = "Legend", shape = "Legend", size = "Legend") +
  theme_minimal()



#
mean(test_merged_BelmontRed$diff, na.rm = TRUE)
sd(test_merged_BelmontRed$diff, na.rm = TRUE)

mean(test_merged_Brahman$diff, na.rm = TRUE)
sd(test_merged_Brahman$diff, na.rm = TRUE)

mean(test_merged_Composite$diff, na.rm = TRUE)
sd(test_merged_Composite$diff, na.rm = TRUE)

mean(test_merged_Unknown$diff, na.rm = TRUE)
sd(test_merged_Unknown$diff, na.rm = TRUE)

mean(test_merged$diff, na.rm = TRUE)
sd(test_merged$diff, na.rm = TRUE)
























